pipeline {     
    agent any
    
    parameters{        

        string(name: 'BRANCH_NAME',                           
        defaultValue: 'master',
        description: 'Repository Branch')
        
        string(name: 'URL_REPOSITORY',                           
        defaultValue: 'https://github.com/J0hann48/integracion_continua_backend.git',
        description: 'Repository name')
        
        string(name: 'VERSION',
        defaultValue: '1.0.0-SNAPSHOT',
        description: 'Product Version')

    }

    stages {
        stage('Make workdir') {
            steps {
               script {                    
                   sh("echo PRUEBA!")
               		//BUILD_DIR="build_${BRANCH_NAME}_${currentBuild.number}"         
                    //sh("mkdir ${BUILD_DIR}")                    
                    sh("ls -R")
                    /*downloadCode(BUILD_DIR, BRANCH_NAME, URL_REPOSITORY)*/
                }                
            }
        }

        stage('Build backend') {
            steps {
                sh("pwd")
                /*dir('spring-boot-backend-apirest/'){
                    sh("pwd")
                }*/
                
               script {
                   dir('spring-boot-backend-apirest/') {
                        println '>>> SHOULD LS THE spring-boot-backend-apirest DIR'
                        sh('ls -al')                                           
                        sh("mvn clean install -DskipTests")
                    }
                }                
            }
        }        

                      

        stage('Prepare settings for generation') {
            parallel {
                stage('Deploy backend') {
                    steps {
                        script {
                            sh("docker stop carrito-compras-backend")
                            renameContainer(true)                   
                            sh("docker run --network network_name --name carrito-compras-backend -p 8087:8080 j0h4nn/carrito-compras-backend:latest")
                        }                
                    }
                }
                stage('Listen container run') {
                    steps {
                        script {
                            sleep(60)
                            currentBuild.result = 'SUCCESS'
                            return
                        }
                    }
                }                
            }
        }  
    }
    

    /*
    post {
        failure {
            script {
            }
        }
        success {
            script {
            }
        }
        
        always {
            script {
            }
        }
    }
    */
}

def downloadCode(def build_dir, def branch_name, def url_repository) {
	dir("${build_dir}") {
	sh("git clone -b ${branch_name} ${url_repository} .")    
    }
}

def renameContainer(def backup){
    if(backup){
        sh("docker rm carrito-compras-backend-old")
        sh("docker rename carrito-compras-backend carrito-compras-backend-old")
    }else{
        sh("docker rename carrito-compras-backend-old carrito-compras-backend")
    }
    
}